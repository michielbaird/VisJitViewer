import sys
import os.path
import inspect

from pypy.tool.logparser import extract_category
from pypy.tool.jitlogparser.storage import LoopStorage
from pypy.tool.jitlogparser.parser import adjust_bridges, import_log,\
     parse_log_counts
     
from _jitviewer.parser import ParserWithHtmlRepr, FunctionHtml
from _jitviewer.display import CodeRepr, CodeReprNoFile
import _jitviewer

def mangle_descr(descr):
    if descr.startswith('TargetToken('):
        return descr[len('TargetToken('):-1]
    if descr.startswith('<Guard'):
        return 'bridge-' + descr[len('<Guard'):-1]
    if descr.startswith('<Loop'):
        return 'entry-' + descr[len('<Loop'):-1]
    return descr.replace(" ", '-')


def create_loop_dict(loops):
    d = {}
    for loop in loops:
        d[mangle_descr(loop.descr)] = loop
    return d
    
def index(storage):
    loops = []
    for index, loop in enumerate(storage.loops):
        try:
            start, stop = loop.comment.find('('), loop.comment.rfind(')')
            name = loop.comment[start + 1:stop]
            func = FunctionHtml.from_operations(loop.operations, storage,
                                                limit=1,
                                                inputargs=loop.inputargs,
                                                loopname=name)
        except CannotFindFile:
            func = DummyFunc()
        func.descr = mangle_descr(loop.descr)
        loops.append(func)
    return loops
                                 
def loopfunc(id,storage):
    name = mangle_descr(id)
    orig_loop = storage.loop_dict[name]

    ops = orig_loop.operations
    for op in ops:
        if op.is_guard():
            descr = mangle_descr(op.descr)
            subloop = storage.loop_dict.get(descr, None)
            if subloop is not None:
                op.bridge = descr
    loop = FunctionHtml.from_operations(ops, storage,
                                        inputargs=orig_loop.inputargs)
    path = []
    if path:
        up = '"' + ','.join(path[:-1]) + '"'
    else:
        up = '""'
    callstack = []
    path_so_far = []
    for e in path:
        if e:
            callstack.append((','.join(path_so_far),
                              '%s in %s at %d' % (loop.name,
                                                  loop.filename,
                                                  loop.startlineno)))
            loop = loop.chunks[int(e)]
            path_so_far.append(e)
    callstack.append((','.join(path_so_far), '%s in %s at %d' % (loop.name,
                                    loop.filename, loop.startlineno)))

    if not loop.has_valid_code() or loop.filename is None:
        startline = 0
        source = CodeReprNoFile(loop)
    else:
        startline, endline = loop.linerange
        try:
            code = storage.load_code(loop.filename)[(loop.startlineno,
                                                          loop.name)]
            if code.co_name == '<module>' and code.co_firstlineno == 1:
                with open(code.co_filename) as f:
                    source = CodeRepr(f.read(), code, loop)
            else:
                source = CodeRepr(inspect.getsource(code), code, loop)
        except (IOError, OSError):
            source = CodeReprNoFile(loop)
    d = (source, name, up, bool(path), startline, callstack)
    return d
    
    
def view():
    pass


def getMySources(filename):
    extra_path = os.path.dirname(filename)
    storage = LoopStorage(extra_path)
    
    log, loops = import_log(filename, ParserWithHtmlRepr)
    parse_log_counts(extract_category(log, 'jit-backend-count'), loops)
    storage.loops = [loop for loop in loops
                     if not loop.descr.startswith('bridge')]
    storage.loop_dict = create_loop_dict(loops)
    loops = index(storage)
    ids = [item.descr for item in loops]
    
    mySources = []
    for item in ids:
        source, name, up, path, startline, callstack = loopfunc(item,storage)
        i = 1
        mySource = []
        pending = False
        pendingLine = 0
        pendingCode = ""
        
        for sourceline in source.lines:
            #print  str(i) + ": " + sourceline.line
            line = sourceline.line
            chunks = []
            if sourceline.in_loop and line.strip != "":
                if sourceline.chunks:
                    makePending = True
                    for chunk in sourceline.chunks:
                        if chunk.is_bytecode:
                            chunks.append((chunk.html_repr(),chunk))
                            print chunk.operations
                            for op in chunk.operations:
                                if op.name != "debug_merge_point": 
                                    print op.html_repr()
                                    for op in chunk.operations:
                                        if op.asm:
                                            print op.asm()

                        
            if len(chunks) == 0:
                if pending:
                   pendingCode +="\n"+ line
                else:
                    pendingCode = line
                    pendingLine = i 
                    pending = True
            else:
                if pending:
                    pending = False
                    mySource.append((pendingLine, pendingCode, None))
                mySource.append((i, line, chunks))
            i += 1
        if pending:
            pending = False
            mySource.append((pendingLine, pendingCode, None))
        mySources.append(mySource)                                
            
                                
    return mySources
        
        
